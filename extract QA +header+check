import pdfplumber
from openpyxl import Workbook, load_workbook
import re

def extract_qa_to_excel_with_headers(input_excel_path, output_excel_path):
    """
    Reads PDF paths from an input Excel file, extracts questions and answers from each PDF,
    and writes them to a single output Excel file.
    """
    # Load the workbook that contains PDF paths
    input_workbook = load_workbook(input_excel_path)
    input_sheet = input_workbook.active

    # Create an output workbook for all Q&A
    output_workbook = Workbook()
    output_sheet = output_workbook.active
    output_sheet.title = "QA Data"
    output_sheet.append(["File Name", "Header", "Question", "Answer", "Objection Number", "Response Number", "Match", "Header Found"])

    # Create a sheet for the extraction status
    status_sheet = output_workbook.create_sheet(title="Extraction Status")
    status_sheet.append(["File Path", "Data Extracted"])

    # Regex patterns for flexibility
    objection_pattern = re.compile(r'Objection\s*\d+\s*[:;]?', re.IGNORECASE)
    response_pattern = re.compile(r'Response\s*\d+\s*[:;]?', re.IGNORECASE)

    # Iterate over all rows in the input Excel (assume PDF paths are in the first column)
    for row in input_sheet.iter_rows(min_row=2, max_col=1, values_only=True):
        pdf_path = row[0]
        filename = pdf_path.split('/')[-1]
        data_extracted = False

        with pdfplumber.open(pdf_path) as pdf:
            # Extract full text from PDF
            full_text = ''
            for page in pdf.pages:
                full_text += page.extract_text() + '\n'
            
            # Find the header and the first objection
            header_found = True
            split_text = re.split(objection_pattern, full_text, 1)
            
            if len(split_text) < 2:
                # If no objections are found, consider the entire text as header
                header = full_text.strip()
                rest = ""
                header_found = False
            else:
                header, rest = split_text[0].strip(), split_text[1].strip()
            
            # Split the remaining text into sections by Objection
            sections = re.split(objection_pattern, rest)
            for i in range(0, len(sections), 2):
                objection_header = sections[i].strip()
                question_section = sections[i + 1].strip() if i + 1 < len(sections) else ''
                
                match = response_pattern.search(question_section)
                if match:
                    question_text = question_section[:match.start()].strip()
                    answer_text = question_section[match.end():].strip()
                    
                    # Clean question and answer text
                    question = question_text.strip()
                    answer = answer_text.strip()
                    
                    # Extract objection and response numbers
                    objection_number_match = re.search(r'\d+', objection_header)
                    objection_number = objection_number_match.group() if objection_number_match else 'N/A'
                    
                    response_number_match = re.search(r'\d+', question_section[match.start():match.end()])
                    response_number = response_number_match.group() if response_number_match else 'N/A'
                    
                    # Check if numbers match
                    match_status = objection_number == response_number

                    output_sheet.append([filename, header, question, answer, objection_number, response_number, match_status, header_found])
                    data_extracted = True
        
        # Log the extraction status
        status_sheet.append([pdf_path, "Yes" if data_extracted else "No"])

    # Save the compiled output workbook
    output_workbook.save(output_excel_path)

# Example paths for the input and output Excel files
input_excel_path = 'D:\\Scholarship\\input_paths.xlsx'  # This file should have paths in the first column
output_excel_path = 'D:\\Scholarship\\compiled_qa.xlsx'

# Extract Q&A to a single Excel file
extract_qa_to_excel_with_headers(input_excel_path, output_excel_path)
