import os
import re
import docx
from datetime import datetime
from openpyxl import Workbook, load_workbook

def extract_qa_to_excel_with_headers_word(input_excel_file_path, input_excel_sheet_name, output_excel_file_path):
    """
    Reads Word document paths from an input Excel file, extracts questions and answers from each document,
    and writes them into a single output Excel file with three sheets: Processed Data, Success Log, and Error Log.
    
    Parameters:
    - input_excel_file_path: Path to the input Excel file containing Word document paths.
    - input_excel_sheet_name: The name of the sheet in the input Excel file.
    - output_excel_file_path: Path to save the output Excel file with all logs and processed data.
    """
    # Load the input Excel file containing Word document paths
    input_workbook = load_workbook(input_excel_file_path)
    input_sheet = input_workbook[input_excel_sheet_name]

    # Create a new Excel workbook for output
    output_workbook = Workbook()
    
    # Create the "Processed Data" sheet for extracted Q&A data
    processed_data_sheet = output_workbook.active
    processed_data_sheet.title = "Processed Data"
    processed_data_sheet.append([
        "File Path", "File Name", "Last Modified Time", "Header", "Question", "Answer", 
        "Objection Number", "Response Number", "Match Status"
    ])

    # Create the "Success Log" sheet for successfully processed files
    success_log_sheet = output_workbook.create_sheet(title="Success Log")
    success_log_sheet.append(["File Path", "File Name", "Last Modified Time"])

    # Create the "Error Log" sheet for files that encountered errors
    error_log_sheet = output_workbook.create_sheet(title="Error Log")
    error_log_sheet.append(["File Path", "Error Message"])

    # Define regular expressions for extracting objection and response patterns
    objection_pattern = re.compile(r"Objections\s*\d+\s*[:.]*", re.IGNORECASE)
    response_pattern = re.compile(r"Response\s*\d+\s*[:.]*", re.IGNORECASE)

    # Process each row in the input Excel file
    for row in input_sheet.iter_rows(min_row=2, max_col=1, values_only=True):
        docx_path = row[0]  # Get the Word document path from the first column
        if not docx_path:  # If the row is empty, log it as an error
            error_log_sheet.append(["Empty row", "Empty row encountered"])
            continue

        filename = os.path.basename(docx_path)  # Extract the file name from the path

        try:
            # Check if the Word document exists
            if not os.path.exists(docx_path):
                error_log_sheet.append([docx_path, "Word document not found"])
                continue

            # Get the last modified time of the file
            last_modified_time = datetime.fromtimestamp(os.path.getmtime(docx_path)).strftime('%Y-%m-%d %H:%M:%S')

            # Load the Word document
            doc = docx.Document(docx_path)
            full_text = ''.join([para.text + '\n' for para in doc.paragraphs])
            header = doc.paragraphs[0].text.strip() if doc.paragraphs else "No header"

            # Split the full text into sections based on objection patterns
            sections = re.split(objection_pattern, full_text)
            if len(sections) <= 1:
                error_log_sheet.append([docx_path, "No objections found in the document"])
                continue

            # Process objections and responses
            for i in range(1, len(sections), 2):
                objection_header = sections[i].strip()
                question_section = sections[i + 1].strip()

                match = response_pattern.search(question_section)
                if match:
                    question_text = question_section[:match.start()].strip()
                    answer_text = question_section[match.end():].strip()

                    objection_number_match = re.search(r'\d+', objection_header)
                    objection_number = objection_number_match.group() if objection_number_match else 'N/A'

                    response_number_match = re.search(r'\d+', question_section[match.start():match.end()])
                    response_number = response_number_match.group() if response_number_match else 'N/A'

                    match_status = objection_number == response_number

                    # Append data to the Processed Data sheet
                    processed_data_sheet.append([
                        docx_path, filename, last_modified_time, header, question_text, answer_text, 
                        objection_number, response_number, match_status
                    ])

            # Log the file as successfully processed
            success_log_sheet.append([docx_path, filename, last_modified_time])

        except Exception as e:
            # If an error occurs, log it in the Error Log sheet
            error_log_sheet.append([docx_path, str(e)])

    # Save the output Excel file with all logs and processed data
    output_workbook.save(output_excel_file_path)
